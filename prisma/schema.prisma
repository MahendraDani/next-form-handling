// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model Accounts {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  feedback  Feedback?

  @@index([id])
}

model Feedback {
  id          Int     @id @default(autoincrement())
  name        String
  occupation  String
  feedback    String
  githubUrl   String  @map("github_url")
  twitterUrl  String? @map("twitter_url")
  linkedinUrl String? @map("linkedin_url")

  makePublic Boolean  @default(false) @map("make_public")
  userId     Int      @unique
  account    Accounts @relation(references: [id], fields: [userId], onDelete: Cascade)

  submittedAt DateTime @default(now()) @map("submitted_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([id])
  @@index([userId])
}

model Dictionary {
  id        Int      @id @default(autoincrement())
  word      String
  createdAt DateTime @default(now()) @map("created_at")
}

enum JokeType {
  single
  twopart
}

enum JokeCategory {
  Programming
  Misc
  Dark
  Pun
  Spooky
  Christmas
}

model Jokes {
  id        Int          @id @default(autoincrement())
  jokeId    Int          @map("joke_id")
  category  JokeCategory
  jokeType  JokeType
  createdAt DateTime     @default(now()) @map("created_at")
}
